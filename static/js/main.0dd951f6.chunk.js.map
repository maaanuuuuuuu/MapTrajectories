{"version":3,"sources":["components/Controller/Controller.tsx","components/Controller/useController.tsx","components/Map/Map.tsx","components/Map/useMap.tsx","context/TrajectoriesContext.tsx","features/Map/MapController.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Controller","infoTrajectory","calcDistance","dots","distance","i","length","Math","sqrt","pow","x","y","arrivalTime","points","sort","a","b","time","departureTime","travelTime","distanceTraveled","map","p","useController","id","Map","displayedTrajectories","onHover","colors","distinctColors","c","push","name","mapHeight","mapWidth","normalizeX","value","biggestX","max","trajectory","flat","t","normalizeY","biggestY","useMap","className","style","border","width","height","trajectoryIndex","dot","cx","cy","r","fill","onMouseOver","x1","x2","y1","y2","strokeWidth","stroke","defaultTrajectories","TrajectoriesContext","createContext","MapController","allTrajectories","useContext","useState","setInfoTrajectory","App","Provider","trajectories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qtEAOaA,EAAa,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,eAExB,ECPyB,SAACA,GAE1B,IAAMC,EAAe,SAACC,GAElB,IADA,IAAIC,EAAW,EACPC,EAAE,EAAGA,EAAEF,EAAKG,OAAQ,EAAGD,IAE3BD,GADcG,KAAKC,KAAKD,KAAKE,IAAIN,EAAK,GAAGO,EAAEP,EAAK,GAAGO,EAAG,GAAKH,KAAKE,IAAIN,EAAK,GAAGQ,EAAER,EAAK,GAAGQ,EAAG,IAI7F,OAAOP,GAGLQ,EAAcX,EAAeY,OAAOC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEE,KAAOD,EAAEC,KAAO,GAAK,KAAG,GAAGA,KAC/EC,EAAgBjB,EAAeY,OAAOC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEE,KAAOD,EAAEC,KAAO,GAAK,KAAGhB,EAAeY,OAAOP,OAAQ,GAAGW,KAC/GE,EAAaD,EAAgBN,EAC7BQ,EAAmBlB,EAAaD,EAAeY,OAAOQ,KAAI,SAAAC,GAE5D,MAAO,CACHZ,EAAGY,EAAEZ,EACLC,EAAGW,EAAEX,OAIb,MAAO,CAACT,eAAcU,cAAaM,gBAAeC,aAAYC,oBDhBKG,CAActB,GAA1EW,EAAP,EAAOA,YAAaM,EAApB,EAAoBA,cAAeC,EAAnC,EAAmCA,WAAYC,EAA/C,EAA+CA,iBAE/C,OACI,+BACI,sCAASnB,EAAeuB,MACxB,mDAAsBvB,EAAeY,OAAOP,OAAQ,KACpD,2CAAcM,KACd,4CAAeM,KACf,+CAAkBC,KAClB,qDAAwBC,KACxB,iDAAoBA,EAAiBD,S,yBETpCM,EAAM,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,sBAAuBC,EAAwB,EAAxBA,QAKlCC,EAAmB,GACzBC,MAAiBR,KAAI,SAACS,GAClBF,EAAOG,KAAKD,EAAEE,WAGlB,MClBkB,SAACN,EAAsCO,EAAkBC,GAW3E,MAAO,CAACC,WAVW,SAACC,GAChB,IAAMC,EAAW9B,KAAK+B,IAAL,MAAA/B,KAAI,YAAQmB,EAAsBL,KAAI,SAAAkB,GAAU,OAAIA,EAAW1B,UAAQ2B,OAAOnB,KAAI,SAAAoB,GAAC,OAAIA,EAAE/B,OAE1G,OAAQ0B,EAAQF,EAASG,GAOTK,WALD,SAACN,GAChB,IAAMO,EAAWpC,KAAK+B,IAAL,MAAA/B,KAAI,YAAQmB,EAAsBL,KAAI,SAAAkB,GAAU,OAAIA,EAAW1B,UAAQ2B,OAAOnB,KAAI,SAAAoB,GAAC,OAAIA,EAAE9B,OAE1G,OAAQyB,EAAQH,EAAUU,IDSGC,CAAOlB,EAPV,IAAL,KAOlBS,EAAP,EAAOA,WAAYO,EAAnB,EAAmBA,WAEnB,OACI,qBAAKG,UAAU,MAAf,SACI,qBACIC,MAbqB,CAAEC,OAAQ,aAc/BC,MAba,IAcbC,OAdkB,IAWtB,SAKKvB,EAAsBL,KAAI,SAACkB,EAAYW,GACpC,OACI,mCACCX,EAAW1B,OAAOC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEE,KAAOD,EAAEC,KAAO,GAAK,KAAGI,KAAI,SAAC8B,EAAK9C,GACjE,OACI,qCACI,wBAEI+C,GAAIjB,EAAWgB,EAAIzC,GACnB2C,GAAIX,EAAWS,EAAIxC,GACnB2C,EAAU,IAANjD,GAAWA,IAAMkC,EAAW1B,OAAOP,OAAQ,EAAK,EAAI,EACxDiD,KAAM3B,EAAOsB,GACbM,YAAa,kBAAM7B,EAAQY,KALtBA,EAAWf,GAAG,IAAMnB,GAOtB,IAANA,GACG,sBAEIoD,GAAItB,EAAWI,EAAW1B,OAAOR,EAAE,GAAGK,GACtCgD,GAAIvB,EAAWI,EAAW1B,OAAOR,GAAGK,GACpCiD,GAAIjB,EAAWH,EAAW1B,OAAOR,EAAE,GAAGM,GACtCiD,GAAIlB,EAAWH,EAAW1B,OAAOR,GAAGM,GACpCkD,YAAa,EACbC,OAAQlC,EAAOsB,GACfM,YAAa,kBAAM7B,EAAQY,KAPtB,QAAUA,EAAWf,GAAG,IAAMnB,mBElCzE0D,EAAqC,CACvC,CACIvC,GAAI,IACJX,OAAQ,CACJ,CACII,KAAM,EACNP,EAAG,EACHC,EAAG,MAMNqD,EAAsBC,wBAAcF,GCpB1C,IAAMG,EAAgB,WAEzB,IAAMC,EDqBCC,qBAAWJ,GCpBlB,EAA4CK,mBAA2B,MAAvE,mBAAOpE,EAAP,KAAuBqE,EAAvB,KAEA,OACI,sBAAKzB,UAAU,SAAf,UACI,sBAAMA,UAAU,YAAhB,SACI,cAAC,EAAD,CAAKnB,sBAAuByC,EAAiBxC,QAAS2C,MAE1D,sBAAMzB,UAAU,aAAhB,SACwB,OAAnB5C,GACG,cAAC,EAAD,CAAYA,eAAgBA,U,QCAjCsE,MAVf,WACE,OACE,qBAAK1B,UAAU,MAAf,SACE,cAACmB,EAAoBQ,SAArB,CAA8BpC,MAAOqC,EAArC,SACE,cAAC,EAAD,SCIOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0dd951f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ITrajectory } from '../../context/TrajectoriesContext';\r\nimport { useController } from './useController';\r\n\r\nexport interface IControllerProps {\r\n    infoTrajectory: ITrajectory\r\n}\r\nexport const Controller = ({infoTrajectory}: IControllerProps) => {\r\n\r\n    const {arrivalTime, departureTime, travelTime, distanceTraveled} = useController(infoTrajectory);\r\n\r\n    return (\r\n        <ul>\r\n            <li>id: {infoTrajectory.id}</li>\r\n            <li>number of stops: {infoTrajectory.points.length -2}</li>\r\n            <li>arrival: {arrivalTime}</li>\r\n            <li>departure:{departureTime}</li>\r\n            <li>travel time: {travelTime}</li>\r\n            <li>distance traveled: {distanceTraveled}</li>\r\n            <li>average speed: {distanceTraveled/travelTime}</li>\r\n        </ul>\r\n    );\r\n}\r\n","import { ITrajectory } from \"../../context/TrajectoriesContext\";\r\n\r\nexport const useController = (infoTrajectory: ITrajectory) => {\r\n    \r\n    const calcDistance = (dots: {x:number; y:number}[]) => {\r\n        let distance = 0;\r\n        for(let i=0; i<dots.length -1; i++) {\r\n            let subDist = Math.sqrt(Math.pow(dots[1].x-dots[0].x, 2) + Math.pow(dots[1].y-dots[0].y, 2));\r\n            distance += subDist;\r\n        }\r\n\r\n        return distance;\r\n    }\r\n\r\n    const arrivalTime = infoTrajectory.points.sort((a,b) => a.time > b.time ? 1 : -1)[0].time;\r\n    const departureTime = infoTrajectory.points.sort((a,b) => a.time > b.time ? 1 : -1)[infoTrajectory.points.length -1].time;\r\n    const travelTime = departureTime - arrivalTime;\r\n    const distanceTraveled = calcDistance(infoTrajectory.points.map(p => { \r\n       \r\n        return {\r\n            x: p.x,\r\n            y: p.y\r\n        }\r\n    }));\r\n\r\n    return {calcDistance, arrivalTime, departureTime, travelTime, distanceTraveled};\r\n} ","import React, { CSSProperties } from 'react';\r\nimport { ITrajectory } from '../../context/TrajectoriesContext';\r\nimport distinctColors from 'distinct-colors'\r\nimport { useMap } from './useMap';\r\n\r\nexport interface IMapProps {\r\n    displayedTrajectories: ITrajectory[];\r\n    onHover: (trajectory: ITrajectory) => void;\r\n}\r\n\r\nexport const Map = ({displayedTrajectories, onHover}: IMapProps) => {\r\n\r\n    const svgStyles: CSSProperties = { border: \"1px solid\" };\r\n    const [width, height] = [800, 600];\r\n    \r\n    const colors: string[] = [];\r\n    distinctColors().map((c) => {\r\n        colors.push(c.name())\r\n    });\r\n\r\n    const {normalizeX, normalizeY} = useMap(displayedTrajectories, height, width)\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <svg\r\n                style={svgStyles}\r\n                width={width}\r\n                height={height}\r\n            >\r\n                {displayedTrajectories.map((trajectory, trajectoryIndex) => {\r\n                    return (\r\n                        <>\r\n                        {trajectory.points.sort((a,b) => a.time > b.time ? 1 : -1).map((dot, i) => {\r\n                            return (\r\n                                <>\r\n                                    <circle\r\n                                        key={trajectory.id+\"_\" + i}\r\n                                        cx={normalizeX(dot.x)}\r\n                                        cy={normalizeY(dot.y)}\r\n                                        r={(i === 0 || i === trajectory.points.length -1) ? 5 : 3}\r\n                                        fill={colors[trajectoryIndex]}\r\n                                        onMouseOver={() => onHover(trajectory)}\r\n                                    />\r\n                                    {i !== 0 && \r\n                                        <line\r\n                                            key={\"line_\" + trajectory.id+\"_\" + i}\r\n                                            x1={normalizeX(trajectory.points[i-1].x)}\r\n                                            x2={normalizeX(trajectory.points[i].x)}\r\n                                            y1={normalizeY(trajectory.points[i-1].y)}\r\n                                            y2={normalizeY(trajectory.points[i].y)}\r\n                                            strokeWidth={2}\r\n                                            stroke={colors[trajectoryIndex]}\r\n                                            onMouseOver={() => onHover(trajectory)}\r\n                                        />\r\n                                    }\r\n                                </>\r\n                            )\r\n                        })}\r\n                        </>\r\n                    )\r\n                })}\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n","import { ITrajectory } from \"../../context/TrajectoriesContext\";\r\n\r\nexport const useMap = (displayedTrajectories: ITrajectory[], mapHeight:number, mapWidth:number) => {\r\n    const normalizeX = (value: number) => {\r\n        const biggestX = Math.max(...displayedTrajectories.map(trajectory => trajectory.points).flat().map(t => t.x));\r\n        \r\n        return (value * mapWidth/biggestX);\r\n    }\r\n    const normalizeY = (value: number) => {\r\n        const biggestY = Math.max(...displayedTrajectories.map(trajectory => trajectory.points).flat().map(t => t.y));\r\n        \r\n        return (value * mapHeight/biggestY);\r\n    }\r\n    return {normalizeX, normalizeY};\r\n} ","import { createContext, useContext } from \"react\";\r\n\r\nexport interface ITrajectory {\r\n    id: string;\r\n    points: IPoint[]\r\n}\r\nexport interface IPoint {\r\n    time: number;\r\n    x: number;\r\n    y: number;\r\n}\r\nconst defaultTrajectories: ITrajectory[] = [\r\n    {\r\n        id: \"0\",\r\n        points: [\r\n            {\r\n                time: 0,\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        ]\r\n    }\r\n]\r\n\r\nexport const TrajectoriesContext = createContext(defaultTrajectories);\r\n\r\nexport function useTrajectoriesContext() {\r\n    return useContext(TrajectoriesContext);\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Controller, Map } from '../../components';\r\nimport { ITrajectory, useTrajectoriesContext } from '../../context/TrajectoriesContext';\r\n\r\nexport const MapController = () => {\r\n\r\n    const allTrajectories = useTrajectoriesContext();\r\n    const [infoTrajectory, setInfoTrajectory] = useState<ITrajectory|null>(null);\r\n\r\n    return (\r\n        <div className=\"layout\">\r\n            <span className=\"leftPanel\">\r\n                <Map displayedTrajectories={allTrajectories} onHover={setInfoTrajectory}/>\r\n            </span>\r\n            <span className=\"rightPanel\">\r\n                {infoTrajectory !== null &&\r\n                    <Controller infoTrajectory={infoTrajectory}/>\r\n                }\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { MapController } from './features/Map/MapController';\nimport trajectories from './trajectoires.json';\nimport { TrajectoriesContext } from './context/TrajectoriesContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TrajectoriesContext.Provider value={trajectories}>\n        <MapController />\n      </TrajectoriesContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}