{"version":3,"sources":["components/Controller/Controller.tsx","components/Map/Map.tsx","context/TrajectoriesContext.tsx","features/Map/MapController.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Controller","infoTrajectory","arrivalTime","points","sort","a","b","time","departureTime","length","travelTime","distanceTraveled","dots","distance","i","Math","sqrt","pow","x","y","calcDistance","map","p","id","Map","displayedTrajectories","onHover","colors","distinctColors","c","push","name","normalizeX","value","biggestX","max","trajectory","flat","t","floor","normalizeY","biggestY","className","style","border","width","height","trajectoryIndex","dot","cx","cy","r","fill","onMouseOver","x1","x2","y1","y2","strokeWidth","stroke","defaultTrajectories","TrajectoriesContext","createContext","MapController","allTrajectories","useContext","useState","setInfoTrajectory","App","Provider","trajectories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2908fbd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ITrajectory } from '../../context/TrajectoriesContext';\r\n\r\nexport interface IControllerProps {\r\n    infoTrajectory: ITrajectory\r\n}\r\nexport const Controller = ({infoTrajectory}: IControllerProps) => {\r\n\r\n    const calcDistance = (dots: {x:number; y:number}[]) => { // TODO use subset ? // TODO use TDD\r\n        let distance = 0;\r\n        for(let i=0; i<dots.length -1; i++) {\r\n            let subDist = Math.sqrt(Math.pow(dots[1].x-dots[0].x, 2) + Math.pow(dots[1].y-dots[0].y, 2));\r\n            distance += subDist;\r\n        }\r\n\r\n        return distance;\r\n    }\r\n\r\n    const arrivalTime = infoTrajectory.points.sort((a,b) => a.time > b.time ? 1 : -1)[0].time;\r\n    const departureTime = infoTrajectory.points.sort((a,b) => a.time > b.time ? 1 : -1)[infoTrajectory.points.length -1].time;\r\n    const travelTime = departureTime - arrivalTime;\r\n    const distanceTraveled = calcDistance(infoTrajectory.points.map(p => { \r\n        return {\r\n            x: p.x,\r\n            y: p.y\r\n        }\r\n    }));\r\n\r\n    return (\r\n        <ul>\r\n            <li>id: {infoTrajectory.id}</li>\r\n            <li>number of stops: {infoTrajectory.points.length -2}</li>\r\n            <li>arrival: {arrivalTime}</li>\r\n            <li>departure:{departureTime}</li>\r\n            <li>travel time: {travelTime}</li>\r\n            <li>distance traveled: {distanceTraveled}</li>\r\n            <li>average speed: {distanceTraveled/travelTime}</li>\r\n        </ul>\r\n    );\r\n}\r\n","import React, { CSSProperties } from 'react';\r\nimport { ITrajectory } from '../../context/TrajectoriesContext';\r\nimport distinctColors from 'distinct-colors'\r\n\r\nexport interface IMapProps {\r\n    displayedTrajectories: ITrajectory[];\r\n    onHover: (trajectory: ITrajectory) => void;\r\n}\r\n\r\nexport const Map = ({displayedTrajectories, onHover}: IMapProps) => {\r\n\r\n    const svgStyles: CSSProperties = { border: \"1px solid\" };\r\n    const [width, height] = [800, 600];\r\n    const colors: string[] = [];\r\n    distinctColors().map((c) => {\r\n        colors.push(c.name())\r\n    });\r\n\r\n    const normalizeX = (value: number) => {\r\n        const biggestX = Math.max(...displayedTrajectories.map(trajectory => trajectory.points).flat().map(t => t.x));\r\n        \r\n        return Math.floor(value * width/biggestX);\r\n    }\r\n    const normalizeY = (value: number) => {\r\n        const biggestY = Math.max(...displayedTrajectories.map(trajectory => trajectory.points).flat().map(t => t.y));\r\n        \r\n        return Math.floor(value * height/biggestY);\r\n    }\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <svg\r\n                style={svgStyles}\r\n                width={width}\r\n                height={height}\r\n            >\r\n                {displayedTrajectories.map((trajectory, trajectoryIndex) => {\r\n                    return (\r\n                        <>\r\n                        {trajectory.points.sort((a,b) => a.time > b.time ? 1 : -1).map((dot, i) => {\r\n                            return (\r\n                                <>\r\n                                    <circle\r\n                                        key={trajectory.id+\"_\" + i}\r\n                                        cx={normalizeX(dot.x)}\r\n                                        cy={normalizeY(dot.y)}\r\n                                        r={(i === 0 || i === trajectory.points.length -1) ? 5 : 3}\r\n                                        fill={colors[trajectoryIndex]}\r\n                                        onMouseOver={() => onHover(trajectory)}\r\n                                    />\r\n                                    {i !== 0 && \r\n                                        <line\r\n                                            key={\"line_\" + trajectory.id+\"_\" + i}\r\n                                            x1={normalizeX(trajectory.points[i-1].x)}\r\n                                            x2={normalizeX(trajectory.points[i].x)}\r\n                                            y1={normalizeY(trajectory.points[i-1].y)}\r\n                                            y2={normalizeY(trajectory.points[i].y)}\r\n                                            strokeWidth={2}\r\n                                            stroke={colors[trajectoryIndex]}\r\n                                            onMouseOver={() => onHover(trajectory)}\r\n                                        />\r\n                                    }\r\n                                </>\r\n                            )\r\n                        })}\r\n                        </>\r\n                    )\r\n                })}\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n","import { createContext, useContext } from \"react\";\r\n\r\nexport interface ITrajectory {\r\n    id: string;\r\n    points: IPoint[]\r\n}\r\nexport interface IPoint {\r\n    time: number;\r\n    x: number;\r\n    y: number;\r\n}\r\nconst defaultTrajectories: ITrajectory[] = [\r\n    {\r\n        id: \"0\",\r\n        points: [\r\n            {\r\n                time: 0,\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        ]\r\n    }\r\n]\r\n\r\nexport const TrajectoriesContext = createContext(defaultTrajectories);\r\n\r\nexport function useTrajectoriesContext() {\r\n    return useContext(TrajectoriesContext);\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Controller, Map } from '../../components';\r\nimport { ITrajectory, useTrajectoriesContext } from '../../context/TrajectoriesContext';\r\n\r\nexport const MapController = () => {\r\n\r\n    const allTrajectories = useTrajectoriesContext();\r\n    const [infoTrajectory, setInfoTrajectory] = useState<ITrajectory|null>(null);\r\n\r\n    return (\r\n        <div className=\"layout\">\r\n            <span className=\"leftPanel\">\r\n                <Map displayedTrajectories={allTrajectories} onHover={setInfoTrajectory}/>\r\n            </span>\r\n            <span className=\"rightPanel\">\r\n                {infoTrajectory !== null &&\r\n                    <Controller infoTrajectory={infoTrajectory}/>\r\n                }\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { MapController } from './features/Map/MapController';\nimport trajectories from './trajectoires.json';\nimport { TrajectoriesContext } from './context/TrajectoriesContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TrajectoriesContext.Provider value={trajectories}>\n        <MapController />\n      </TrajectoriesContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}